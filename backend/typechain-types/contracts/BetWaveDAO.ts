/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BetWaveDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DAOQuorum"
      | "DAOVoteList"
      | "addUser"
      | "addValidators"
      | "askDAOVote"
      | "betQuorum"
      | "creatorFees"
      | "daoVoteNumber"
      | "getDaoControlValue"
      | "getDaoVoteHasVoted"
      | "platformFees"
      | "setDaoVote"
      | "userList"
      | "userNumber"
      | "userToId"
      | "validatorFees"
      | "validatorNumber"
      | "validatorNumberRequired"
      | "validators"
      | "withdrawFromValidators"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "newDAOVote"
      | "newUser"
      | "newValidator"
      | "setDAOVote"
      | "voteRejected"
      | "withdrawValidator"
  ): EventFragment;

  encodeFunctionData(functionFragment: "DAOQuorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DAOVoteList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "addUser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "askDAOVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "betQuorum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "creatorFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoVoteNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDaoControlValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDaoVoteHasVoted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "platformFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDaoVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userToId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorNumberRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromValidators",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DAOQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DAOVoteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "askDAOVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betQuorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creatorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoVoteNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDaoControlValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDaoVoteHasVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDaoVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userToId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorNumberRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromValidators",
    data: BytesLike
  ): Result;
}

export namespace newDAOVoteEvent {
  export type InputTuple = [arg0: BigNumberish, arg1: BigNumberish];
  export type OutputTuple = [arg0: bigint, arg1: bigint];
  export interface OutputObject {
    arg0: bigint;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace newUserEvent {
  export type InputTuple = [arg0: AddressLike, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace newValidatorEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace setDAOVoteEvent {
  export type InputTuple = [
    arg0: AddressLike,
    arg1: BigNumberish,
    arg2: BigNumberish
  ];
  export type OutputTuple = [arg0: string, arg1: bigint, arg2: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
    arg2: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace voteRejectedEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace withdrawValidatorEvent {
  export type InputTuple = [arg0: AddressLike, arg1: BigNumberish];
  export type OutputTuple = [arg0: string, arg1: bigint];
  export interface OutputObject {
    arg0: string;
    arg1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BetWaveDAO extends BaseContract {
  connect(runner?: ContractRunner | null): BetWaveDAO;
  waitForDeployment(): Promise<this>;

  interface: BetWaveDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DAOQuorum: TypedContractMethod<[], [bigint], "view">;

  DAOVoteList: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        voteType: bigint;
        voteFor: bigint;
        voteAgainst: bigint;
        newValue: bigint;
      }
    ],
    "view"
  >;

  addUser: TypedContractMethod<[], [void], "nonpayable">;

  addValidators: TypedContractMethod<[], [void], "payable">;

  askDAOVote: TypedContractMethod<
    [_voteType: BigNumberish, _newValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  betQuorum: TypedContractMethod<[], [bigint], "view">;

  creatorFees: TypedContractMethod<[], [bigint], "view">;

  daoVoteNumber: TypedContractMethod<[], [bigint], "view">;

  getDaoControlValue: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  getDaoVoteHasVoted: TypedContractMethod<
    [_id: BigNumberish],
    [boolean],
    "view"
  >;

  platformFees: TypedContractMethod<[], [bigint], "view">;

  setDaoVote: TypedContractMethod<
    [_id: BigNumberish, _option: BigNumberish],
    [void],
    "nonpayable"
  >;

  userList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  userNumber: TypedContractMethod<[], [bigint], "view">;

  userToId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  validatorFees: TypedContractMethod<[], [bigint], "view">;

  validatorNumber: TypedContractMethod<[], [bigint], "view">;

  validatorNumberRequired: TypedContractMethod<[], [bigint], "view">;

  validators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint] & {
        userAddress: string;
        isBlacklisted: boolean;
        strike: bigint;
      }
    ],
    "view"
  >;

  withdrawFromValidators: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DAOQuorum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DAOVoteList"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        voteType: bigint;
        voteFor: bigint;
        voteAgainst: bigint;
        newValue: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addUser"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addValidators"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "askDAOVote"
  ): TypedContractMethod<
    [_voteType: BigNumberish, _newValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "betQuorum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creatorFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "daoVoteNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDaoControlValue"
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDaoVoteHasVoted"
  ): TypedContractMethod<[_id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDaoVote"
  ): TypedContractMethod<
    [_id: BigNumberish, _option: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "userNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userToId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "validatorFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validatorNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validatorNumberRequired"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, boolean, bigint] & {
        userAddress: string;
        isBlacklisted: boolean;
        strike: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFromValidators"
  ): TypedContractMethod<[], [void], "payable">;

  getEvent(
    key: "newDAOVote"
  ): TypedContractEvent<
    newDAOVoteEvent.InputTuple,
    newDAOVoteEvent.OutputTuple,
    newDAOVoteEvent.OutputObject
  >;
  getEvent(
    key: "newUser"
  ): TypedContractEvent<
    newUserEvent.InputTuple,
    newUserEvent.OutputTuple,
    newUserEvent.OutputObject
  >;
  getEvent(
    key: "newValidator"
  ): TypedContractEvent<
    newValidatorEvent.InputTuple,
    newValidatorEvent.OutputTuple,
    newValidatorEvent.OutputObject
  >;
  getEvent(
    key: "setDAOVote"
  ): TypedContractEvent<
    setDAOVoteEvent.InputTuple,
    setDAOVoteEvent.OutputTuple,
    setDAOVoteEvent.OutputObject
  >;
  getEvent(
    key: "voteRejected"
  ): TypedContractEvent<
    voteRejectedEvent.InputTuple,
    voteRejectedEvent.OutputTuple,
    voteRejectedEvent.OutputObject
  >;
  getEvent(
    key: "withdrawValidator"
  ): TypedContractEvent<
    withdrawValidatorEvent.InputTuple,
    withdrawValidatorEvent.OutputTuple,
    withdrawValidatorEvent.OutputObject
  >;

  filters: {
    "newDAOVote(uint8,uint256)": TypedContractEvent<
      newDAOVoteEvent.InputTuple,
      newDAOVoteEvent.OutputTuple,
      newDAOVoteEvent.OutputObject
    >;
    newDAOVote: TypedContractEvent<
      newDAOVoteEvent.InputTuple,
      newDAOVoteEvent.OutputTuple,
      newDAOVoteEvent.OutputObject
    >;

    "newUser(address,uint256)": TypedContractEvent<
      newUserEvent.InputTuple,
      newUserEvent.OutputTuple,
      newUserEvent.OutputObject
    >;
    newUser: TypedContractEvent<
      newUserEvent.InputTuple,
      newUserEvent.OutputTuple,
      newUserEvent.OutputObject
    >;

    "newValidator(address)": TypedContractEvent<
      newValidatorEvent.InputTuple,
      newValidatorEvent.OutputTuple,
      newValidatorEvent.OutputObject
    >;
    newValidator: TypedContractEvent<
      newValidatorEvent.InputTuple,
      newValidatorEvent.OutputTuple,
      newValidatorEvent.OutputObject
    >;

    "setDAOVote(address,uint256,uint256)": TypedContractEvent<
      setDAOVoteEvent.InputTuple,
      setDAOVoteEvent.OutputTuple,
      setDAOVoteEvent.OutputObject
    >;
    setDAOVote: TypedContractEvent<
      setDAOVoteEvent.InputTuple,
      setDAOVoteEvent.OutputTuple,
      setDAOVoteEvent.OutputObject
    >;

    "voteRejected(uint256)": TypedContractEvent<
      voteRejectedEvent.InputTuple,
      voteRejectedEvent.OutputTuple,
      voteRejectedEvent.OutputObject
    >;
    voteRejected: TypedContractEvent<
      voteRejectedEvent.InputTuple,
      voteRejectedEvent.OutputTuple,
      voteRejectedEvent.OutputObject
    >;

    "withdrawValidator(address,uint256)": TypedContractEvent<
      withdrawValidatorEvent.InputTuple,
      withdrawValidatorEvent.OutputTuple,
      withdrawValidatorEvent.OutputObject
    >;
    withdrawValidator: TypedContractEvent<
      withdrawValidatorEvent.InputTuple,
      withdrawValidatorEvent.OutputTuple,
      withdrawValidatorEvent.OutputObject
    >;
  };
}
